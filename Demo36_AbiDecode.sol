//SPDX-License-Identifier: MIT
pragma solidity ^0.8.14;

contract DemoAbiDecode{
    struct A {
        string name;
        uint[2] nums;
    }

    // x: 123
    //addr: 0xbfC99F161B83f591a14E1fc13D12d7c086542774
    //arr: [1,2,3]
    //a: ["axbd",[1,2]]
    function encode(uint x, address addr, uint[] calldata arr, A calldata a) external pure returns(bytes memory){
        return abi.encode(x, addr, arr, a);
    }

    //data: 0x000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000bfc99f161b83f591a14e1fc13d12d7c
    function decode(bytes calldata data) external pure returns(uint , address, uint[] memory, A memory){
        (uint x, address addr, uint[] memory arr, A memory a) = abi.decode(data, (uint, address, uint[], A));
        return (x, addr, arr, a);
    }

}